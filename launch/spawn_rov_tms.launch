<launch>
    
    <arg name="namespace_tms" default="tms" />
    <arg name="namespace_rov" default="rov" />

    <!-- Change these values to spawn the ROV and TMS with 3d or 2d sonar using sonar_type,
         and change visualize to enable or disable the visualisation of the TMS' 2d sonar -->
    <arg name="visualize" default="true" />
    <arg name="sonar_type" default="3d" />  <!-- '3d' or '2d' -->

    <!-- Start undervannsverden -->
    <include file="$(find uuv_gazebo_worlds)/launch/ocean_waves.launch" />


  <!-- Spawn ROV (Conditional Selection) -->
  <group ns="$(arg namespace_rov)">
    <!-- Load robot description (3D or 2D) -->
    <param name="robot_description"
      command="$(find xacro)/xacro '$(find deep_ocean)/robots/rov_$(arg sonar_type)_sonar.xacro'
        namespace:=$(arg namespace_rov)
        visualize:=$(arg visualize)" />

    <!-- Spawn model in Gazebo (same for both) -->
    <node name="spawn_rov" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-param /$(arg namespace_rov)/robot_description -urdf -model rov -x -2 -y 1 -z -9.7" />

    <!-- Robot state publisher (same for both) -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace_rov)/robot_description" />
      <param name="publish_frequency" value="5" />
    </node>

    <!-- 3D Sonar Nodes -->
    <group if="$(eval sonar_type == '3d')">
      <node name="ls_two_pc" pkg="deep_ocean" type="laserscan_to_pointcloud_rov.py" output="screen"/>
      <node name="pc_converter" pkg="deep_ocean" type="pointcloud_to_xyz_3d_rov.py" output="screen"/>
      <node name="z_values" pkg="deep_ocean" type="angular_velocity_z_rov.py" output="screen" />
    </group>

    <!-- 2D FLS Nodes -->
    <group unless="$(eval sonar_type == '3d')">
      <node name="ls_two_pc" pkg="deep_ocean" type="laserscan_to_pointcloud_rov.py" output="screen"/>
      <node name="pc_converter" pkg="deep_ocean" type="pointcloud_to_xyz_2d_rov.py" output="screen"/>
    </group>
  </group>



  <!-- Spawn TMS (Conditional Selection) -->
  <group ns="$(arg namespace_tms)">
    <!-- Load robot description (3D or 2D) -->
    <param name="robot_description"
      command="$(find xacro)/xacro '$(find deep_ocean)/robots/tms_$(arg sonar_type)_sonar.xacro'
        namespace:=$(arg namespace_tms)
        visualize:=$(arg visualize)" />

    <!-- Spawn model in Gazebo (same for both) -->
    <node name="spawn_tms" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-param /$(arg namespace_tms)/robot_description -urdf -model tms -x 3 -y 0 -z -10 -R 0 -P 0 -Y 0" />

    <!-- Robot state publisher (same for both) -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace_tms)/robot_description" />
      <param name="publish_frequency" value="5" />
    </node>

    <!-- 3D Sonar Nodes -->
    <group if="$(eval sonar_type == '3d')">
      <node name="ls_two_pc" pkg="deep_ocean" type="laserscan_to_pointcloud_tms.py" output="screen"/>
      <node name="pc_converter" pkg="deep_ocean" type="pointcloud_to_xyz_3d_tms.py" output="screen"/>
      <node name="z_values" pkg="deep_ocean" type="angular_velocity_z_tms.py" output="screen" />
    </group>

    <!-- 2D FLS Nodes -->
    <group unless="$(eval sonar_type == '3d')">
      <node name="ls_two_pc" pkg="deep_ocean" type="laserscan_to_pointcloud_tms.py" output="screen"/>
      <node name="pc_converter" pkg="deep_ocean" type="pointcloud_to_xyz_2d_tms.py" output="screen"/>
    </group>
  </group>



  <include file="$(find uuv_assistants)/launch/message_to_tf.launch">
    <arg name="namespace" value="$(arg namespace_tms)"/>
    <arg name="world_frame" value="world"/>
    <arg name="child_frame_id" value="/$(arg namespace_tms)/base_link"/>
  </include>    

  <include file="$(find uuv_assistants)/launch/message_to_tf.launch">
    <arg name="namespace" value="$(arg namespace_rov)"/>
    <arg name="world_frame" value="world"/>
    <arg name="child_frame_id" value="/$(arg namespace_rov)/base_link"/>
  </include>    

</launch>
<?xml version="1.0"?>

<robot name="rov" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:arg name="namespace" default="rov"/>

    <!-- Necessary for sensors -->
    <xacro:include filename="$(find deep_ocean)/urdf/sonar_snippets.xacro" />
    <!-- <xacro:include filename="$(find uuv_sensor_ros_plugins)/urdf/sensor_snippets.xacro"/> -->
    <!-- Necessary for thrusters -->
    <xacro:include filename="$(find deep_ocean)/urdf/actuators.xacro" />
    <xacro:include filename="$(find uuv_descriptions)/urdf/common.urdf.xacro" />
    <xacro:include filename="$(find deep_ocean)/urdf/thruster_snippets.xacro" />
    <!-- Necessary for state publishing -->
    <xacro:include filename="$(find uuv_gazebo_ros_plugins)/urdf/misc.xacro" />

    <!-- Fluid Density of Water (kg/mÂ³) -->
    <xacro:property name="fluid_density" value="1028"/>

    <!-- Hardcoded Dimensions from the Collision Mesh -->
    <xacro:property name="size_y" value="0.833"/> <!-- Width -->
    <xacro:property name="size_x" value="1.25"/>  <!-- Length -->
    <xacro:property name="size_z" value="0.77"/>  <!-- Height -->

    <!-- Mass of the ROV -->
    <xacro:property name="mass" value="326"/>

    <!-- Compute Volume to Ensure Neutral Buoyancy -->
    <xacro:property name="volume" value="${mass / fluid_density}"/>

    <!-- Center of Buoyancy Adjusted -->
    <xacro:property name="cob_z" value="${0.5 * size_z}"/>

    <!-- Inertia Calculation -->
    <xacro:property name="ixx" value="${(1/12) * mass * (size_x * size_x + size_z * size_z)}"/>
    <xacro:property name="iyy" value="${(1/12) * mass * (size_y * size_y + size_z * size_z)}"/>
    <xacro:property name="izz" value="${(1/12) * mass * (size_y * size_y + size_x * size_x)}"/>

    <!-- Define Base Link -->
    <link name="$(arg namespace)/base_link">
        <inertial>
            <mass value="${mass}"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia ixx="${ixx}" ixy="0.0" ixz="0.0" iyy="${iyy}" iyz="0.0" izz="${izz}"/>
        </inertial>

        <!-- Visual Representation -->
        <visual>
            <geometry>
                <mesh filename="package://deep_ocean/meshes/rov_visual.dae" scale="1 1 1"/>
            </geometry>
        </visual>

        <!-- Collision Geometry -->
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="package://deep_ocean/meshes/rov_collision.stl" scale="1 1 1"/>
            </geometry>
        </collision>
    </link>

    <!-- Initiating thrusters from UUV -->
  <xacro:thruster_macro namespace="$(arg namespace)" thruster_id="0">
    <origin xyz="0.56374 0.22357 0.38038" rpy="1.5708 0 ${-0.6981}"/>
  </xacro:thruster_macro>
  <xacro:thruster_macro namespace="$(arg namespace)" thruster_id="1">
    <origin xyz="-0.15606 0.3381 0.38038" rpy="1.5708 0 ${0.6981}"/>
  </xacro:thruster_macro>
  <xacro:thruster_macro namespace="$(arg namespace)" thruster_id="2">
    <origin xyz="-0.060821 0.30171 0.70723" rpy="0.1745 ${-0.3491-pi/2} ${pi/2}"/>
  </xacro:thruster_macro>
  <xacro:thruster_macro namespace="$(arg namespace)" thruster_id="3">
    <origin xyz="0.56374 -0.22357 0.38038" rpy="1.5708 0 ${0.6981}"/>
  </xacro:thruster_macro>
  <xacro:thruster_macro namespace="$(arg namespace)" thruster_id="4">
    <origin xyz="-0.060821 -0.3017 0.70723" rpy="0.1745 ${0.3491-pi/2} ${pi/2}"/>
  </xacro:thruster_macro>
  <xacro:thruster_macro namespace="$(arg namespace)" thruster_id="5">
    <origin xyz="-0.15606 -0.3381 0.38038" rpy="1.5708 0 ${-0.6981}"/>
  </xacro:thruster_macro>
  <xacro:thruster_macro namespace="$(arg namespace)" thruster_id="6">
    <origin xyz="0.39991 -0.002266 0.70723" rpy="-0.3491 ${-pi/2} ${pi/2}"/>
  </xacro:thruster_macro>

  <xacro:default_joint_state_publisher namespace="$(arg namespace)" update_rate="50"/>

    <!-- initilizing Sonar macro -->
  <xacro:forward_multibeam_sonar_m450_130 namespace="$(arg namespace)" parent_link="$(arg namespace)/base_link">
    <origin xyz="0.63 0 0.63" rpy="0 0 0"/>
  </xacro:forward_multibeam_sonar_m450_130>

    <!-- mounting camera -->
  <!--xacro:default_camera namespace="$(arg namespace)" parent_link="$(arg namespace)/base_link" suffix="">
    <origin xyz="0.63 0 0.4" rpy="0 0.6 0"/>
  </xacro:default_camera-->

    <gazebo>
        <plugin name="uuv_plugin" filename="libuuv_underwater_object_ros_plugin.so">
            <fluid_density>${fluid_density}</fluid_density>
            <flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>
            <debug>0</debug>      
            <link name="$(arg namespace)/base_link">
                <neutrally_buoyant>1</neutrally_buoyant>  <!-- Ensures mass and volume decide float/sink -->
                <volume>${volume}</volume>  
                <box>
                    <width>${size_y}</width>
                    <length>${size_x}</length>
                    <height>${size_z}</height>
                </box>
                <center_of_buoyancy>0 0 ${cob_z}</center_of_buoyancy>

                <!-- Hydrodynamic Model using Fossen type -->
                <hydrodynamic_model>
                    <type>fossen</type>

                    <!-- Rough Added Mass Estimation -->
                    <added_mass>
                        ${0.1 * mass}  0  0  0  0  0
                        0  ${0.1 * mass}  0  0  0  0  
                        0  0  ${0.1 * mass}  0  0  0
                        0  0  0  ${0.05 * mass}  0  0
                        0  0  0  0  ${0.05 * mass}  0
                        0  0  0  0  0  ${0.05 * mass}
                    </added_mass>

                    <!-- Rough Linear Damping Estimation -->
                    <linear_damping>
                        ${-100 * size_y} ${-100 * size_x} ${-100 * size_z} 
                        ${-40 * size_z} ${-40 * size_x} ${-40 * size_y}
                    </linear_damping>

                    <!-- Rough Quadratic Damping Estimation -->
                    <quadratic_damping>
                        ${-120 * size_y} ${-120 * size_x} ${-120 * size_z} 
                        ${-50 * size_z} ${-50 * size_x} ${-50 * size_y}
                    </quadratic_damping>

                </hydrodynamic_model>

            </link>    
        </plugin>
    </gazebo>  

  <!-- imu sensor -->

  <link name= "imu_link">
      <visual>
          <geometry> 
              <box size= "0.01 0.01 0.01" />
          </geometry>
          <material name= "red" >
              <color rgba= "1 0 0 1" />
          </material>
      </visual>
      <inertial>
          <!-- <mass value= "0.39" /> -->
          <mass value= "0.0" />
          <origin xyz= "0 0 0" />
          <inertia ixx= "0.1" ixy= "0.0" ixz= "0.0" iyy= "0.1" iyz= "0.0" izz= "0.1" />
      </inertial>
      <collision>
          <geometry>
              <box size= "0.01 0.01 0.01" />
          </geometry>
      </collision>
  </link>

  <joint name= "imu_joint" type= "fixed">
      <parent link= "$(arg namespace)/base_link" />
      <child link= "imu_link" />
      <!-- <origin xyz= "0.55 0 3 " rpy= "0 0 0"/> -->
      <origin xyz="0 0 0.81" rpy="0 0 0"/>
  </joint> 

  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>10</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>
  
      <!-- camera -->
    <link name= "camera_link">
        <visual>
            <geometry> 
                <box size= "0.1 0.1 0.1" />
            </geometry>
            <material name= "red" >
                <color rgba= "1 0 0 1" />
            </material>
        </visual>
        <inertial>
            <mass value= "0.2" />
            <origin xyz= "0 0 0" />
            <inertia ixx= "0.1" ixy= "0.0" ixz= "0.0" iyy= "0.1" iyz= "0.0" izz= "0.1" />
        </inertial>
        <collision>
            <geometry>
                <box size= "0.1 0.1 0.1" />
            </geometry>
        </collision>
    </link>

    <joint name= "camera_joint" type= "fixed">
        <parent link= "$(arg namespace)/base_link" />
        <child link= "camera_link" />
        <origin xyz="0.63 0 0.4" rpy="0 0 0"/>
    </joint> 

    <link name= "camera_link_optical"></link>

    <joint name= "camera_optical_joint" type= "fixed">
        <parent link= "camera_link" />
        <child link= "camera_link_optical" />
        <origin xyz= "0 0 0 " rpy= "-1.57 0 -1.57"/>
    </joint> 

    <gazebo reference= "camera_link">
        <material>Gazebo/Red</material>
        <sensor type= "camera" name= "camera_sensor">
            <pose>0 0 0 0 0 0</pose>
            <visualize>true</visualize>
            <update_rate>30</update_rate>
            <camera>
                <horizontal_fov>1.047</horizontal_fov>
                <image>
                    <width>640</width>
                    <height>480</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.1</near>
                    <far>10</far>
                </clip>
            </camera>
            <plugin name= "camera_controller" filename= "libgazebo_ros_camera.so" >
                <frameName>camera_link_optical</frameName>
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <cameraName>camera</cameraName>
                <imageTopicName>image_raw</imageTopicName>
                <cameraInfoTopicName>camera_info</cameraInfoTopicName>
            </plugin>
        </sensor>
    </gazebo>

</robot>
